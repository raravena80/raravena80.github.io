<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Json on</title><link>https://serverbooter.com/categories/json/</link><description>Recent content in Json on</description><generator>Hugo</generator><language>en-us</language><managingEditor>raravena80@gmail.com (Ricardo Aravena)</managingEditor><webMaster>raravena80@gmail.com (Ricardo Aravena)</webMaster><lastBuildDate>Thu, 14 Aug 2025 09:50:14 -1000</lastBuildDate><atom:link href="https://serverbooter.com/categories/json/index.xml" rel="self" type="application/rss+xml"/><item><title>Parsing Deeply Nested JSON in Go</title><link>https://serverbooter.com/post/parsing-nested-json-in-go/</link><pubDate>Fri, 28 Apr 2017 16:28:29 +0000</pubDate><author>raravena80@gmail.com (Ricardo Aravena)</author><guid>https://serverbooter.com/post/parsing-nested-json-in-go/</guid><description>&lt;p>Parsing deeply nested json in Go is a bit challenging due to the fact that the language doesn&amp;rsquo;t provide many helpers to do so. If you do that in Ruby or Python it&amp;rsquo;s pretty straight forward running some like this in Python &lt;code>j = json.load(jsonstring)&lt;/code> or in Ruby &lt;code>j = JSON.load(jsonstring)&lt;/code>.&lt;/p>
&lt;p>In go generally you have to prefine your structs and run through an &lt;code>Unmarshal&lt;/code> function which means that most of the times you need to know ahead of time what the nest level and structure of your target json is to parse it. For example:&lt;/p></description></item><item><title>Simple Clouformation With Multiple AWS Accounts</title><link>https://serverbooter.com/post/simple-clouformation-with-multiple-aws-accounts/</link><pubDate>Thu, 24 Oct 2013 16:28:29 +0000</pubDate><author>raravena80@gmail.com (Ricardo Aravena)</author><guid>https://serverbooter.com/post/simple-clouformation-with-multiple-aws-accounts/</guid><description>&lt;p>In this post I&amp;rsquo;ll describe how to create a simple AWS CloudFormation template
so that we can deploy stack using multiple AWS accounts. In other words a common
JSON CloudFormation template that can be use to bring
up a stack in multiple accounts. The way we are able to do this is by
having exact copies of the &lt;a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ComponentsAMIs.html">EC2 AMIs&lt;/a>
on all the accounts and regions where we are deploying our stack.&lt;/p></description></item></channel></rss>