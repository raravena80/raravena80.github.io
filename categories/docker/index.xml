<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docker on</title><link>http://localhost:1313/categories/docker/</link><description>Recent content in Docker on</description><generator>Hugo</generator><language>en-us</language><managingEditor>raravena80@gmail.com (Ricardo Aravena)</managingEditor><webMaster>raravena80@gmail.com (Ricardo Aravena)</webMaster><lastBuildDate>Thu, 14 Aug 2025 09:50:14 -1000</lastBuildDate><atom:link href="http://localhost:1313/categories/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>CloudNativeCon KubeCon Europe</title><link>http://localhost:1313/post/cloudnativecon-kubecon-europe/</link><pubDate>Tue, 25 Apr 2017 16:28:29 +0000</pubDate><author>raravena80@gmail.com (Ricardo Aravena)</author><guid>http://localhost:1313/post/cloudnativecon-kubecon-europe/</guid><description>&lt;p>This same blog entry is &lt;a href="https://www.cncf.io/blog/2017/04/18/diversity-scholarship-series-berlin-eyes-cloud-infrastructure-fanatic/">here&lt;/a>. Thanks to the cncf folks who helped me put this together.&lt;/p>
&lt;hr>
&lt;p>Iâ€™ve attended many conferences before, but I was happy to get the diversity scholarship to attend CloudNativeCon + KubeCon Europe 2017 in Berlin as there is always so much more to learn. It was my first time attending an event organized by the Linux Foundation, and I hope to attend more in the future.
I loved all the insights and advances that I obtained through all of the highlighted Cloud Native projects including Kubernetes, gRPC, OpenTracing, Prometheus, Linkerd, Fluentd and OpenDNS from the variety of industry leaders. The keynotes were quite memorable as well, including the Kubernetes 1.6 updates by Aparna Sinha (Google), Federation from Kelsey Hightower (Google), Kubernetes Security Updates from Clayton Coleman (Red Hat), Helm from Michelle Noorali (Deis), Scaling Kubernetes from Joe Beda (Heptio) and Quay from Brandon Phillips (CoreOS).&lt;/p></description></item><item><title>LXC Playing</title><link>http://localhost:1313/post/lxc-playing/</link><pubDate>Sat, 29 Oct 2016 16:28:29 +0000</pubDate><author>raravena80@gmail.com (Ricardo Aravena)</author><guid>http://localhost:1313/post/lxc-playing/</guid><description>&lt;p>Over the last couple of years Docker has seen incredible growth across the tech industry. Its use ties together with deployment of Microservices in most Cloud based companies. Docker is easy to use and its in constant development.
In the last month I decided to venture and try something different that has been around even before Docker but in a more primitive form. You see containers have been around before Docker for a long time and even before that with the introduction of chroot in 1979. Containers were first introduced in Solaris in 2005 with the introduction of Solaris Containers, described as &amp;lsquo;chroot&amp;rsquo; on steroids. Then later in 2008 with adoption of the Containers name by LXC. (what Docker was based on initially) and also the inclusion of user namespaces in the Linux Kernel 3.8.&lt;/p></description></item><item><title>Docker First Impressions</title><link>http://localhost:1313/post/docker-first-impressions/</link><pubDate>Fri, 07 Mar 2014 16:28:29 +0000</pubDate><author>raravena80@gmail.com (Ricardo Aravena)</author><guid>http://localhost:1313/post/docker-first-impressions/</guid><description>&lt;p>For the last few days I&amp;rsquo;ve been taking at crack at using the recent &lt;a href="https://www.docker.io/">Docker&lt;/a> container deployment tool that I&amp;rsquo;ve been
hearing a lot buzz about.
In essence, it&amp;rsquo;s a wrapper on top of Linux &lt;a href="https://linuxcontainers.org/">LXC containers&lt;/a>, writen in the new friendly and not so popular yet &lt;a href="http://golang.org/">Go&lt;/a> language developed at Google.&lt;/p>
&lt;p>Just a little bit of background, for those of you not familiar with LXC containers,
they are pretty much defined as &lt;code>chroot&lt;/code> on steroids. Basically, you can run isolated virtual
environments in a single Linux machine and make it look like that they are different machines.
These environments give you the advantage of being isalated and at the same they are able to use
the same Linux exectutables and memory space to improve speed and footprint size.&lt;/p></description></item></channel></rss>